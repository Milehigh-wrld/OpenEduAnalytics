{
    "name": "EdFi_Land",
    "properties": {
        "nbformat": 4,
        "nbformat_minor": 2,
        "bigDataPool": {
            "referenceName": "spark3p2med",
            "type": "BigDataPoolReference"
        },
        "sessionProperties": {
            "driverMemory": "56g",
            "driverCores": 8,
            "executorMemory": "56g",
            "executorCores": 8,
            "numExecutors": 2,
            "runAsWorkspaceSystemIdentity": false,
            "conf": {
                "spark.dynamicAllocation.enabled": "false",
                "spark.dynamicAllocation.minExecutors": "2",
                "spark.dynamicAllocation.maxExecutors": "2",
                "spark.autotune.trackingId": "ea39c954-fb01-46e5-adb9-6df8bc4b38a6"
            }
        },
        "metadata": {
            "saveOutput": true,
            "enableDebugMode": false,
            "kernelspec": {
                "name": "synapse_pyspark",
                "display_name": "Synapse PySpark"
            },
            "language_info": {
                "name": "python"
            },
            "a365ComputeOptions": {
                "id": "/subscriptions/5721bb7d-69e0-45a2-8919-c43e0d8710ce/resourceGroups/rg-oea-insmod1/providers/Microsoft.Synapse/workspaces/syn-oea-insmod1/bigDataPools/spark3p2med",
                "name": "spark3p2med",
                "type": "Spark",
                "endpoint": "https://syn-oea-insmod1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p2med",
                "auth": {
                    "type": "AAD",
                    "authResource": "https://dev.azuresynapse.net",
                    "authHeader": null
                },
                "sparkVersion": "3.3",
                "nodeCount": 3,
                "cores": 8,
                "memory": 56,
                "extraHeader": null
            },
            "sessionKeepAliveTimeout": 30
        },
        "cells": [
            {
                "cell_type": "code",
                "source": [
                    "\r\n",
                    "#General parameters\r\n",
                    "workspace = \"dev\"\r\n",
                    "\r\n",
                    "#EdFi specific parameters\r\n",
                    "kvName = \"kv-oea-insmod1\"\r\n",
                    "authUrl = \"https://api.edgraph.dev/edfi/v5.2/saas/5eb775fb-4eff-4889-9eae-3919b7a2d321/oauth/token\"\r\n",
                    "dataManagementUrl = \"https://api.edgraph.dev/edfi/v5.2/saas/data/v3/5eb775fb-4eff-4889-9eae-3919b7a2d321/2011\"\r\n",
                    "changeQueriesUrl = \"https://api.edgraph.dev/edfi/v5.2/saas/changequeries/v1/5eb775fb-4eff-4889-9eae-3919b7a2d321/2011\" \r\n",
                    "dependenciesUrl = \"https://api.edgraph.dev/edfi/v5.2/saas/metadata/data/v3/5eb775fb-4eff-4889-9eae-3919b7a2d321/2011/dependencies\"\r\n",
                    "apiVersion = \"5.2\"\r\n",
                    "batchLimit = 100\r\n",
                    "moduleName = \"EdFi-3\"\r\n",
                    "minChangeVer = None\r\n",
                    "maxChangeVer = None\r\n",
                    ""
                ],
                "outputs": [],
                "execution_count": 64
            },
            {
                "cell_type": "code",
                "metadata": {
                    "jupyter": {
                        "source_hidden": false,
                        "outputs_hidden": false
                    },
                    "nteract": {
                        "transient": {
                            "deleting": false
                        }
                    }
                },
                "source": [
                    "%run /OEA_py"
                ],
                "outputs": [],
                "execution_count": 65
            },
            {
                "cell_type": "code",
                "metadata": {
                    "jupyter": {
                        "source_hidden": false,
                        "outputs_hidden": false
                    },
                    "nteract": {
                        "transient": {
                            "deleting": false
                        }
                    }
                },
                "source": [
                    "oea.set_workspace(workspace)"
                ],
                "outputs": [],
                "execution_count": 66
            },
            {
                "cell_type": "code",
                "metadata": {
                    "jupyter": {
                        "source_hidden": false,
                        "outputs_hidden": false
                    },
                    "nteract": {
                        "transient": {
                            "deleting": false
                        }
                    }
                },
                "source": [
                    "import requests\r\n",
                    "import json\r\n",
                    "import uuid\r\n",
                    "from requests.auth import HTTPBasicAuth\r\n",
                    "from datetime import datetime\r\n",
                    "import logging\r\n",
                    "\r\n",
                    "logger = logging.getLogger('EdFiLandClient')\r\n",
                    "\r\n",
                    "class EdFiLandClient:\r\n",
                    "\r\n",
                    "    #The constructor\r\n",
                    "    def __init__(self, workspace, kvName, moduleName, authUrl, dataManagementUrl, changeQueriesUrl, dependenciesUrl, apiVersion, batchLimit, minChangeVer=\"\", maxChangeVer=\"\"):\r\n",
                    "        self.workspace = workspace\r\n",
                    "        self.keyvault_linked_service = 'LS_KeyVault'\r\n",
                    "        oea.kvName = kvName\r\n",
                    "\r\n",
                    "        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\r\n",
                    "        for handler in logging.getLogger().handlers:\r\n",
                    "            handler.setFormatter(formatter)           \r\n",
                    "        # Customize log level for all loggers\r\n",
                    "        logging.getLogger().setLevel(logging.INFO)   \r\n",
                    "        logger.info(f\"minChangeVersion={minChangeVer} and maxChangeVersion={maxChangeVer}\")\r\n",
                    "        try:\r\n",
                    "            #try to get the credentials from keyvault\r\n",
                    "            self.clientId = oea._get_secret(\"edfi-clientid\")\r\n",
                    "            self.clientSecret = oea._get_secret(\"edfi-clientsecret\")\r\n",
                    "        except Exception as e:\r\n",
                    "            #if there was an error getting the credentials\r\n",
                    "            #if this is the dev instance proceed with test data, otherwise raise the Exception\r\n",
                    "            logger.info(f\"failed to retrieve clientId and clientSecret from keyvault with exception: {str(e)}\")\r\n",
                    "            if workspace == \"dev\":\r\n",
                    "                logger.info(\"defaulting to test data\")\r\n",
                    "                self.clientId = \"\"\r\n",
                    "                self.clientSecret = \"\"\r\n",
                    "            else:\r\n",
                    "                raise\r\n",
                    "        \r\n",
                    "        self.authUrl = authUrl\r\n",
                    "        self.dataManagementUrl = dataManagementUrl\r\n",
                    "        self.changeQueriesUrl = changeQueriesUrl\r\n",
                    "        self.dependenciesUrl = dependenciesUrl\r\n",
                    "        self.runDate = datetime.utcnow().strftime('%Y-%m-%d')\r\n",
                    "        self.authTime = None\r\n",
                    "        self.expiresIn = None\r\n",
                    "        self.accessToken = None\r\n",
                    "        self.transactionalFolder = f\"Transactional/{moduleName}/{apiVersion}\"\r\n",
                    "        self.batchLimit = batchLimit\r\n",
                    "        self.minChangeVer = minChangeVer\r\n",
                    "        self.maxChangeVer = maxChangeVer\r\n",
                    "\r\n",
                    "    #Method to get the access token for the test data set\r\n",
                    "    def authenticateWithAuthorization(self):\r\n",
                    "        #TODO: need to update this if we want it to work with other edfi provided test data set versions\r\n",
                    "        result = requests.post(\"https://api.ed-fi.org/v5.2/api/oauth/token\",{\"grant_type\":\"client_credentials\"},headers={\"Authorization\":\"Basic UnZjb2hLejl6SEk0OkUxaUVGdXNhTmY4MXh6Q3h3SGZib2xrQw==\"})\r\n",
                    "        return result\r\n",
                    "\r\n",
                    "    #Method to get the access token for a production system with basic auth\r\n",
                    "    def authenticateWithBasic(self):\r\n",
                    "        authHeader = HTTPBasicAuth(self.clientId, self.clientSecret)\r\n",
                    "        result = requests.post(self.authUrl,{\"grant_type\":\"client_credentials\"},auth=authHeader)\r\n",
                    "        return result\r\n",
                    "\r\n",
                    "    #This method orchestrates the authentication\r\n",
                    "    def authenticate(self):\r\n",
                    "        self.authTime = datetime.now()\r\n",
                    "\r\n",
                    "        if not self.clientId or not self.clientSecret: #self.workspace == \"dev\":\r\n",
                    "            result = self.authenticateWithAuthorization().json()\r\n",
                    "        else:\r\n",
                    "            result = self.authenticateWithBasic().json()\r\n",
                    "        self.expiresIn = result[\"expires_in\"]\r\n",
                    "        self.accessToken = result[\"access_token\"]\r\n",
                    "    \r\n",
                    "    #This method manages the access token, refreshing it when required\r\n",
                    "    def getAccessToken(self):\r\n",
                    "        currentTime = datetime.now()\r\n",
                    "        #Get a new access token if none exists, or if the expires time is within 5 minutes of expiry\r\n",
                    "        if self.accessToken == None or (currentTime-self.authTime).total_seconds() > self.expiresIn - 300:\r\n",
                    "            self.authenticate()\r\n",
                    "            return self.accessToken\r\n",
                    "        else:\r\n",
                    "            return self.accessToken \r\n",
                    "\r\n",
                    "    def getChangeQueryVersion(self):\r\n",
                    "        access_token = self.getAccessToken()\r\n",
                    "        response = requests.get(changeQueriesUrl + \"/availableChangeVersions\", headers={\"Authorization\":\"Bearer \" + access_token})\r\n",
                    "        return response.json()\r\n",
                    "    \r\n",
                    "    def getEntities(self):\r\n",
                    "        return requests.get(self.dependenciesUrl).json()\r\n",
                    "\r\n",
                    "    def getDeletes(self,resource, minChangeVersion, maxChangeVersion):\r\n",
                    "        url = f\"{self.dataManagementUrl}{resource}/deletes?MinChangeVersion={minChangeVersion}&MaxChangeVersion={maxChangeVersion}\"\r\n",
                    "        result = requests.get(url,headers = {\"Authorization\": f\"Bearer {self.getAccessToken()}\"})\r\n",
                    "        return result\r\n",
                    "\r\n",
                    "    def writeToDeletesFile(self, resource, deletes):\r\n",
                    "        path = f\"stage1/{self.transactionalFolder}{resource}/Deletes/delete_batch_data/rundate={self.runDate}/data.json\"\r\n",
                    "        mssparkutils.fs.put(oea.to_url(path),deletes.text)\r\n",
                    "\r\n",
                    "    def landEntities(self):\r\n",
                    "        entities = self.getEntities()\r\n",
                    "        changeVersion = self.getChangeQueryVersion()\r\n",
                    "        minChangeVersion = changeVersion['OldestChangeVersion'] if self.minChangeVer == None else int(self.minChangeVer)\r\n",
                    "        maxChangeVersion = changeVersion['NewestChangeVersion']  if self.maxChangeVer == None else int(self.maxChangeVer)\r\n",
                    "        for entity in entities:\r\n",
                    "            resource = entity['resource']\r\n",
                    "            resourceMinChangeVersion = self.getChangeVersion(resource, minChangeVersion) if self.minChangeVer == None else minChangeVersion\r\n",
                    "            deletes = self.getDeletes(resource,resourceMinChangeVersion,maxChangeVersion)\r\n",
                    "            if len(deletes.json()):\r\n",
                    "                self.writeToDeletesFile(resource,deletes)\r\n",
                    "            self.landEntity(resource, resourceMinChangeVersion, maxChangeVersion)\r\n",
                    "            \r\n",
                    "    \r\n",
                    "    def getChangeVersion(self, resource, default):\r\n",
                    "        path = f\"stage1/{self.transactionalFolder}{resource}/changeFile.json\"\r\n",
                    "        if mssparkutils.fs.exists(oea.to_url(path)):\r\n",
                    "            return json.loads(mssparkutils.fs.head(oea.to_url(path)))['changeVersion']\r\n",
                    "        else:\r\n",
                    "            return default\r\n",
                    "\r\n",
                    "    def landEntity(self,resource,minChangeVersion,maxChangeVersion):\r\n",
                    "        logger.info(f\"initiating {resource}\")\r\n",
                    "        path = f\"stage1/{self.transactionalFolder}{resource}\"\r\n",
                    "        url = f\"{self.dataManagementUrl}{resource}?MinChangeVersion={minChangeVersion}&MaxChangeVersion={maxChangeVersion}&totalCount=true\"\r\n",
                    "        total_count_response = requests.get(url, headers={\"Authorization\":f\"Bearer {self.getAccessToken()}\"})\r\n",
                    "        try:\r\n",
                    "            total_count = int(total_count_response.headers[\"Total-Count\"])\r\n",
                    "            batches = total_count // self.batchLimit\r\n",
                    "            for i in range(batches + 1):\r\n",
                    "                batch_url=f\"{url}&limit={self.batchLimit}&offset={(i)*self.batchLimit}\"\r\n",
                    "                data = requests.get(batch_url, headers={\"Authorization\":f\"Bearer {self.getAccessToken()}\"})          \r\n",
                    "                filepath = f\"{path}/Upserts/delta_batch_data/rundate={self.runDate}/data{uuid.uuid4()}.json\"\r\n",
                    "                output = json.loads(data.text)\r\n",
                    "                output_string = \"\"\r\n",
                    "                for line in output:\r\n",
                    "                    output_string += json.dumps(line) + \"\\n\"\r\n",
                    "                mssparkutils.fs.put(oea.to_url(filepath),output_string)\r\n",
                    "        except:\r\n",
                    "            data = requests.get(url, headers={\"Authorization\":f\"Bearer {self.getAccessToken()}\"})          \r\n",
                    "            filepath = f\"{path}/Upserts/delta_batch_data/rundate={self.runDate}/data{uuid.uuid4()}.json\"\r\n",
                    "            output = json.loads(data.text)\r\n",
                    "            output_string = \"\"\r\n",
                    "            for line in output:\r\n",
                    "                output_string += json.dumps(line) + \"\\n\"\r\n",
                    "            mssparkutils.fs.put(oea.to_url(filepath),output)\r\n",
                    "        \r\n",
                    "        changeFilepath = f\"{path}/changeFile.json\"\r\n",
                    "        changeData = {\"changeVersion\":maxChangeVersion}\r\n",
                    "        mssparkutils.fs.put(oea.to_url(changeFilepath),json.dumps(changeData),True)\r\n",
                    "        logging.info(f\"completed {resource}\")\r\n",
                    "\r\n",
                    ""
                ],
                "outputs": [],
                "execution_count": 67
            },
            {
                "cell_type": "code",
                "metadata": {
                    "jupyter": {
                        "source_hidden": false,
                        "outputs_hidden": false
                    },
                    "nteract": {
                        "transient": {
                            "deleting": false
                        }
                    }
                },
                "source": [
                    "exception = None\r\n",
                    "try:\r\n",
                    "    edfiLandClient = EdFiLandClient(workspace, kvName, moduleName, authUrl, dataManagementUrl, changeQueriesUrl, dependenciesUrl, apiVersion, batchLimit, minChangeVer, maxChangeVer)\r\n",
                    "\r\n",
                    "    edfiLandClient.landEntities()\r\n",
                    "except Exception as e:\r\n",
                    "    exception = e\r\n",
                    ""
                ],
                "outputs": [],
                "execution_count": 68
            },
            {
                "cell_type": "code",
                "metadata": {
                    "jupyter": {
                        "source_hidden": false,
                        "outputs_hidden": false
                    },
                    "nteract": {
                        "transient": {
                            "deleting": false
                        }
                    }
                },
                "source": [
                    "if exception != None:\r\n",
                    "    raise exception"
                ],
                "outputs": []
            }
        ]
    }
}