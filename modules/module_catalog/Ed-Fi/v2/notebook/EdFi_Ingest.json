{
    "name": "EdFi_Ingest",
    "properties": {
        "nbformat": 4,
        "nbformat_minor": 2,
        "bigDataPool": {
            "referenceName": "spark3p2sm",
            "type": "BigDataPoolReference"
        },
        "sessionProperties": {
            "driverMemory": "28g",
            "driverCores": 4,
            "executorMemory": "28g",
            "executorCores": 4,
            "numExecutors": 2,
            "runAsWorkspaceSystemIdentity": false,
            "conf": {
                "spark.dynamicAllocation.enabled": "false",
                "spark.dynamicAllocation.minExecutors": "2",
                "spark.dynamicAllocation.maxExecutors": "2",
                "spark.autotune.trackingId": "29783224-80e3-43ab-9294-985837ae518f"
            }
        },
        "metadata": {
            "saveOutput": true,
            "enableDebugMode": false,
            "kernelspec": {
                "name": "synapse_pyspark",
                "display_name": "Synapse PySpark"
            },
            "language_info": {
                "name": "python"
            },
            "a365ComputeOptions": {
                "id": "/subscriptions/5721bb7d-69e0-45a2-8919-c43e0d8710ce/resourceGroups/rg-oea-insmod1/providers/Microsoft.Synapse/workspaces/syn-oea-insmod1/bigDataPools/spark3p2sm",
                "name": "spark3p2sm",
                "type": "Spark",
                "endpoint": "https://syn-oea-insmod1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark3p2sm",
                "auth": {
                    "type": "AAD",
                    "authResource": "https://dev.azuresynapse.net",
                    "authHeader": null
                },
                "sparkVersion": "3.3",
                "nodeCount": 3,
                "cores": 4,
                "memory": 28,
                "extraHeader": null
            },
            "sessionKeepAliveTimeout": 30
        },
        "cells": [
            {
                "cell_type": "code",
                "source": [
                    "# workspace = \"dev\"\r\n",
                    "# apiVersion = \"5.2\"\r\n",
                    "# moduleName = \"EdFi4\""
                ],
                "outputs": [],
                "execution_count": 7
            },
            {
                "cell_type": "code",
                "metadata": {
                    "jupyter": {
                        "source_hidden": false,
                        "outputs_hidden": false
                    },
                    "nteract": {
                        "transient": {
                            "deleting": false
                        }
                    }
                },
                "source": [
                    "%run OEA_py"
                ],
                "outputs": [],
                "execution_count": 8
            },
            {
                "cell_type": "code",
                "metadata": {
                    "jupyter": {
                        "source_hidden": false,
                        "outputs_hidden": false
                    },
                    "nteract": {
                        "transient": {
                            "deleting": false
                        }
                    }
                },
                "source": [
                    "oea.set_workspace(workspace)"
                ],
                "outputs": [],
                "execution_count": 9
            },
            {
                "cell_type": "code",
                "metadata": {
                    "jupyter": {
                        "source_hidden": false,
                        "outputs_hidden": false
                    },
                    "nteract": {
                        "transient": {
                            "deleting": false
                        }
                    }
                },
                "source": [
                    "items = oea.get_folders(f'stage1/Transactional/{moduleName}/{apiVersion}/ed-fi')\r\n",
                    "print(items)"
                ],
                "outputs": [],
                "execution_count": 10
            },
            {
                "cell_type": "code",
                "metadata": {
                    "jupyter": {
                        "source_hidden": false,
                        "outputs_hidden": false
                    },
                    "nteract": {
                        "transient": {
                            "deleting": false
                        }
                    }
                },
                "source": [
                    "def should_ingest(entity_path):\r\n",
                    "    raw_path = f'stage1/Transactional/{entity_path}'\r\n",
                    "    if not oea.path_exists(raw_path):\r\n",
                    "        return False\r\n",
                    "    batch_type, source_data_format = oea.get_batch_info(raw_path)\r\n",
                    "    logger.info(f'Ingesting from: {raw_path}, batch type of: {batch_type}, source data format of: {source_data_format}')\r\n",
                    "    source_url = oea.to_url(f'{raw_path}/{batch_type}_batch_data')\r\n",
                    "\r\n",
                    "    if batch_type == 'delta' or batch_type == 'additive': source_url = f'{source_url}/{oea.get_latest_folder(source_url)}' \r\n",
                    "\r\n",
                    "    return oea.get_folder_size(source_url) > 0\r\n",
                    "\r\n",
                    "def ingest_edfi_dataset(tables_source):\r\n",
                    "    items = oea.get_folders(tables_source)\r\n",
                    "    options = {'header':False}\r\n",
                    "    for item in items[:10]: \r\n",
                    "        tables_source = 'stage1/Transactional/' + moduleName + '/' + apiVersion + '/ed-fi'\r\n",
                    "        table_path = tables_source +'/'+ item\r\n",
                    "        try:\r\n",
                    "            entity_path = moduleName + '/'+ apiVersion +'/ed-fi/' + item \r\n",
                    "            print(item)\r\n",
                    "            if item == 'metadata.csv':\r\n",
                    "                logger.info('ignore metadata processing, since this is not a table to be ingested')\r\n",
                    "            else:\r\n",
                    "                if(should_ingest(entity_path)):\r\n",
                    "                    oea.ingest(entity_path, 'id', options)\r\n",
                    "        except AnalysisException as e:\r\n",
                    "            # This means the table may have not been properly refined due to errors with the primary key not aligning with columns expected in the lookup table.\r\n",
                    "            pass"
                ],
                "outputs": [],
                "execution_count": 11
            },
            {
                "cell_type": "code",
                "metadata": {
                    "jupyter": {
                        "source_hidden": false,
                        "outputs_hidden": false
                    },
                    "nteract": {
                        "transient": {
                            "deleting": false
                        }
                    }
                },
                "source": [
                    "ingest_edfi_dataset('stage1/Transactional/' + moduleName + '/' + apiVersion + '/ed-fi')"
                ],
                "outputs": [],
                "execution_count": 12
            }
        ]
    }
}